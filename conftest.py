import allure
import os
import json
from selenium import webdriver
import pytest
from logger_all import setup_logger
from Base.BasePage import BasePage
from datetime import datetime
from bot import send_message

@pytest.fixture(scope="session", autouse=True)
def driver(request):
    config = load_config()
    browser_name = config["BROWSER"].lower()
    headless = config["HEADLESS"]
    if request.node.get_closest_marker("needs_isolation"):
        pytest.skip("Skipping shared driver for isolated test")
    options = webdriver.ChromeOptions()
    options.add_argument("--no-sandbox")
    options.add_argument("--incognito")
    options.add_argument("--disable-dev-shm-usage")
    options.add_argument("--window-size=1920,1080")

    if headless:
        options.add_argument("--headless=new")

    # –°–æ–∑–¥–∞–µ–º –¥—Ä–∞–π–≤–µ—Ä –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –±—Ä–∞—É–∑–µ—Ä–∞
    if browser_name == "firefox":
        driver_instance = webdriver.Firefox(options=options)
    elif browser_name == "edge":
        driver_instance = webdriver.Edge(options=options)
    else:
        driver_instance = webdriver.Chrome(options=options)

    # –ò—Å–ø–æ–ª—å–∑—É–µ–º –æ–¥–∏–Ω —ç–∫–∑–µ–º–ø–ª—è—Ä –¥—Ä–∞–π–≤–µ—Ä–∞
    yield driver_instance
    driver_instance.quit()

@pytest.fixture(scope="function", autouse=True)
def setup_function(request, driver):
    """–§–∏–∫—Å—Ç—É—Ä–∞ –¥–ª—è –ø–æ–¥–≥–æ—Ç–æ–≤–∫–∏ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –æ–∫—Ä—É–∂–µ–Ω–∏—è."""
    request.cls.driver = driver
    yield
    driver.delete_all_cookies()

@pytest.hookimpl(hookwrapper=True)
def pytest_runtest_makereport(item, call):
    """
    –•—É–∫ –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ —Ç–µ—Å—Ç–∞ –≤ request.node.
    –î–æ–±–∞–≤–ª—è–µ—Ç —Å–æ–∑–¥–∞–Ω–∏–µ —Å–∫—Ä–∏–Ω—à–æ—Ç–æ–≤ –ø—Ä–∏ –æ—à–∏–±–∫–∞—Ö –≤ —Ç–µ—Å—Ç–∞—Ö.
    """
    outcome = yield
    report = outcome.get_result()

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —Ç–µ—Å—Ç–∞
    if report.when == "call":
        setattr(item, "rep_call", report)  # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —Ç–µ—Å—Ç–∞

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Ç–µ—Å—Ç –∑–∞–≤–µ—Ä—à–∏–ª—Å—è —Å –æ—à–∏–±–∫–æ–π –∏ –µ—Å—Ç—å –¥—Ä–∞–π–≤–µ—Ä
        if report.failed and hasattr(item, "funcargs"):
            driver = item.funcargs.get("driver") or item.funcargs.get("isolated_driver")
            if driver and isinstance(driver, webdriver.Remote):  # –£–±–µ–¥–∏–º—Å—è, —á—Ç–æ —ç—Ç–æ Selenium WebDriver
                # –°–æ–∑–¥–∞–µ–º –ø–∞–ø–∫—É –¥–ª—è —Å–∫—Ä–∏–Ω—à–æ—Ç–æ–≤, –µ—Å–ª–∏ –æ–Ω–∞ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
                screenshot_folder = "ERR_screenshots"
                os.makedirs(screenshot_folder, exist_ok=True)

                # –§–æ—Ä–º–∏—Ä—É–µ–º –∏–º—è —Ñ–∞–π–ª–∞ —Å–∫—Ä–∏–Ω—à–æ—Ç–∞
                test_name = item.name
                screenshot_file = os.path.join(screenshot_folder, f"{test_name}.png")

                # –î–µ–ª–∞–µ–º —Å–∫—Ä–∏–Ω—à–æ—Ç
                try:
                    driver.save_screenshot(screenshot_file)
                    print(f"–°–∫—Ä–∏–Ω—à–æ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω: {screenshot_file}")
                except Exception as e:
                    print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Å–∫—Ä–∏–Ω—à–æ—Ç–∞: {e}")

def load_config():
    """–ó–∞–≥—Ä—É–∑–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –∏–∑ —Ñ–∞–π–ª–∞ config.json —Å –ø—Ä–æ–≤–µ—Ä–∫–æ–π –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã—Ö –ø–æ–ª–µ–π"""
    try:
        with open("config.json", "r") as f:
            config = json.load(f)
            required_fields = ["BROWSER", "HEADLESS"]
            for field in required_fields:
                if field not in config:
                    config[field] = {"BROWSER": "chrome", "HEADLESS": True}[field]
            return config
    except (FileNotFoundError, json.JSONDecodeError):
        return {"BROWSER": "chrome", "HEADLESS": True}

@pytest.fixture(autouse=True)
def auto_logging(request):
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ª–æ–≥–≥–µ—Ä–∞
    logger = setup_logger(request.node.name)

    # –ü–æ–ª—É—á–∞–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ –∏–∑ Allure
    allure_title = request.node.get_closest_marker('allure_title')
    test_name = allure_title.args[0] if allure_title else request.node.name

    # –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–∞—á–∞–ª–∞ —Ç–µ—Å—Ç–∞
    logger.info(f"====== –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–∞: {test_name} ======")

    yield  # –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ —Ç–µ—Å—Ç–∞

    # –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ —Ç–µ—Å—Ç–∞
    report = getattr(request.node, "rep_call", None)  # –î–æ—Å—Ç—É–ø –∫ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —Ç–µ—Å—Ç–∞

    if report:
        if report.passed:
            logger.info(f"====== –¢–µ—Å—Ç —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω: {test_name} ======")
        elif report.failed:
            logger.error(f"====== –¢–µ—Å—Ç —É–ø–∞–ª: {test_name} | –ü—Ä–∏—á–∏–Ω–∞: {report.longrepr} ======")
        elif report.skipped:
            logger.warning(f"====== –¢–µ—Å—Ç –ø—Ä–æ–ø—É—â–µ–Ω: {test_name} ======")

    logger.info("=" * 60)

@pytest.fixture(scope="function")
def isolated_driver(request):
    """–§–∏–∫—Å—Ç—É—Ä–∞ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–π —Å–µ—Å—Å–∏–∏ –¥—Ä–∞–π–≤–µ—Ä–∞."""
    config = load_config()
    browser_name = config["BROWSER"].lower()
    headless = config["HEADLESS"]

    options = webdriver.ChromeOptions()
    options.add_argument("--no-sandbox")
    options.add_argument("--incognito")
    options.add_argument("--disable-dev-shm-usage")
    options.add_argument("--window-size=1920,1080")

    if headless:
        options.add_argument("--headless=new")

    # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä –¥—Ä–∞–π–≤–µ—Ä–∞
    if browser_name == "firefox":
        driver_instance = webdriver.Firefox(options=options)
    elif browser_name == "edge":
        driver_instance = webdriver.Edge(options=options)
    else:
        driver_instance = webdriver.Chrome(options=options)

    yield driver_instance
    # –ó–∞–∫—Ä—ã–≤–∞–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—É—é —Å–µ—Å—Å–∏—é –ø–æ—Å–ª–µ —Ç–µ—Å—Ç–∞
    driver_instance.quit()

@pytest.fixture(scope="session", autouse=True)
def send_summary(request):
    """
    –§–∏–∫—Å—Ç—É—Ä–∞ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–≤–æ–¥–Ω–æ–≥–æ –æ—Ç—á–µ—Ç–∞ –ø–æ—Å–ª–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –≤—Å–µ—Ö —Ç–µ—Å—Ç–æ–≤.
    """
    session = request.session

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—Ä–µ–º—è –Ω–∞—á–∞–ª–∞ —Ç–µ—Å—Ç–æ–≤–æ–π —Å–µ—Å—Å–∏–∏
    start_time = datetime.now()

    summary = {
        "total": 0,
        "passed": 0,
        "failed": 0,
        "skipped": 0,
        "failed_tests": [],
        "skipped_tests": []
    }

    def _send_summary():
        # –°–æ–±–∏—Ä–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ —Ç–µ—Å—Ç–∞–º
        summary["total"] = len(session.items)
        for item in session.items:
            if hasattr(item, "rep_call"):
                report = item.rep_call
                if report.passed:
                    summary["passed"] += 1
                elif report.failed:
                    summary["failed"] += 1
                    summary["failed_tests"].append(f"{item.name} (–æ—à–∏–±–∫–∞: {report.longrepr})")
                elif report.skipped:
                    summary["skipped"] += 1
                    reason = getattr(report, "wasxfail", "unknown")
                    summary["skipped_tests"].append(f"{item.name} (–ø—Ä–∏—á–∏–Ω–∞: {reason})")

        end_time = datetime.now()
        duration = end_time - start_time

        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
        message = (
            "üìä –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ:\n"
            f"üìú –í—Å–µ–≥–æ —Ç–µ—Å—Ç–æ–≤: {summary['total']}\n"
            f"‚úÖ –£—Å–ø–µ—à–Ω–æ: {summary['passed']}\n"
            f"‚ùå –ü—Ä–æ–≤–∞–ª–µ–Ω–æ: {summary['failed']}\n"
            f"‚ö†Ô∏è –ü—Ä–æ–ø—É—â–µ–Ω–æ: {summary['skipped']}\n\n"
            f"‚è± –í—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è: {duration.seconds // 60} –º–∏–Ω {duration.seconds % 60} —Å–µ–∫\n"
            f"üìÖ –î–∞—Ç–∞ –Ω–∞—á–∞–ª–∞: {start_time.date()}\n"
            f"‚è∞ –í—Ä–µ–º—è –Ω–∞—á–∞–ª–∞: {start_time.strftime('%H:%M:%S')}\n\n"
        )

        # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø—Ä–æ–≤–∞–ª–µ–Ω–Ω—ã—Ö —Ç–µ—Å—Ç–∞—Ö
        if summary["failed"] > 0:
            message += "üìù –ü—Ä–æ–≤–∞–ª–µ–Ω–Ω—ã–µ —Ç–µ—Å—Ç—ã:\n"
            for test in summary["failed_tests"]:
                message += f"  - {test}\n"

        # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø—Ä–æ–ø—É—â–µ–Ω–Ω—ã—Ö —Ç–µ—Å—Ç–∞—Ö
        if summary["skipped"] > 0:
            message += "\nüìù –ü—Ä–æ–ø—É—â–µ–Ω–Ω—ã–µ —Ç–µ—Å—Ç—ã:\n"
            for test in summary["skipped_tests"]:
                message += f"  - {test}\n"

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ Telegram
        try:
            send_message(message)
            print("–°–≤–æ–¥–Ω—ã–π –æ—Ç—á–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω —á–µ—Ä–µ–∑ send_message.")
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–≤–æ–¥–Ω–æ–≥–æ –æ—Ç—á–µ—Ç–∞: {e}")

    # –î–æ–±–∞–≤–ª—è–µ–º —Ñ–∏–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä —Å –Ω–µ–±–æ–ª—å—à–æ–π –∑–∞–¥–µ—Ä–∂–∫–æ–π
    def on_exit():
        import time
        time.sleep(2)  # –î–∞–µ–º —Å–∏—Å—Ç–µ–º–µ –Ω–µ–º–Ω–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏ –Ω–∞ –∑–∞–∫—Ä—ã—Ç–∏–µ –¥—Ä–∞–π–≤–µ—Ä–∞
        _send_summary()

    request.addfinalizer(on_exit)